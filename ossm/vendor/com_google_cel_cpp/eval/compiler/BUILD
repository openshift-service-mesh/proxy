DEFAULT_VISIBILITY = [
    "//eval:__subpackages__",
    "//runtime:__subpackages__",
    "//extensions:__subpackages__",
]

# This package contains code
# that compiles Expr object into evaluatable CelExpression
package(default_visibility = ["//visibility:public"])

licenses(["notice"])

exports_files(["LICENSE"])

cc_library(
    name = "flat_expr_builder_extensions",
    srcs = ["flat_expr_builder_extensions.cc"],
    hdrs = ["flat_expr_builder_extensions.h"],
    deps = [
        ":resolver",
        "//base:ast",
        "//base:data",
        "//base/ast_internal:ast_impl",
        "//base/ast_internal:expr",
        "//eval/eval:evaluator_core",
        "//runtime:runtime_options",
        "//runtime/internal:issue_collector",
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/types:span",
    ],
)

cc_test(
    name = "flat_expr_builder_extensions_test",
    srcs = ["flat_expr_builder_extensions_test.cc"],
    deps = [
        ":flat_expr_builder_extensions",
        ":resolver",
        "//base/ast_internal:expr",
        "//eval/eval:const_value_step",
        "//eval/eval:evaluator_core",
        "//internal:testing",
        "//runtime:function_registry",
        "//runtime:runtime_issue",
        "//runtime:runtime_options",
        "//runtime/internal:issue_collector",
        "@com_google_absl//absl/status",
    ],
)

cc_library(
    name = "flat_expr_builder",
    srcs = [
        "flat_expr_builder.cc",
    ],
    hdrs = [
        "flat_expr_builder.h",
    ],
    deps = [
        ":flat_expr_builder_extensions",
        ":resolver",
        "//base:ast",
        "//base:builtins",
        "//base:data",
        "//base:memory",
        "//base/ast_internal:ast_impl",
        "//base/ast_internal:expr",
        "//eval/eval:comprehension_slots",
        "//eval/eval:comprehension_step",
        "//eval/eval:const_value_step",
        "//eval/eval:container_access_step",
        "//eval/eval:create_list_step",
        "//eval/eval:create_struct_step",
        "//eval/eval:evaluator_core",
        "//eval/eval:function_step",
        "//eval/eval:ident_step",
        "//eval/eval:jump_step",
        "//eval/eval:logic_step",
        "//eval/eval:select_step",
        "//eval/eval:shadowable_value_step",
        "//eval/eval:ternary_step",
        "//eval/public:ast_traverse_native",
        "//eval/public:ast_visitor_native",
        "//eval/public:cel_type_registry",
        "//eval/public:source_position_native",
        "//internal:status_macros",
        "//runtime:function_registry",
        "//runtime:runtime_issue",
        "//runtime:runtime_options",
        "//runtime:type_registry",
        "//runtime/internal:issue_collector",
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/container:node_hash_map",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:span",
        "@com_google_absl//absl/types:variant",
    ],
)

cc_test(
    name = "flat_expr_builder_test",
    srcs = [
        "flat_expr_builder_test.cc",
    ],
    data = [
        "//eval/testutil:simple_test_message_proto",
    ],
    deps = [
        ":cel_expression_builder_flat_impl",
        ":constant_folding",
        ":flat_expr_builder",
        ":qualified_reference_resolver",
        "//base:function",
        "//base:function_descriptor",
        "//eval/public:activation",
        "//eval/public:builtin_func_registrar",
        "//eval/public:cel_attribute",
        "//eval/public:cel_builtins",
        "//eval/public:cel_expr_builder_factory",
        "//eval/public:cel_expression",
        "//eval/public:cel_function_adapter",
        "//eval/public:cel_function_registry",
        "//eval/public:cel_options",
        "//eval/public:cel_value",
        "//eval/public:portable_cel_function_adapter",
        "//eval/public:unknown_attribute_set",
        "//eval/public:unknown_set",
        "//eval/public/containers:container_backed_map_impl",
        "//eval/public/structs:cel_proto_descriptor_pool_builder",
        "//eval/public/structs:cel_proto_wrapper",
        "//eval/public/structs:protobuf_descriptor_type_provider",
        "//eval/public/testing:matchers",
        "//eval/testutil:test_message_cc_proto",
        "//extensions/protobuf:memory_manager",
        "//internal:status_macros",
        "//internal:testing",
        "//parser",
        "//runtime:runtime_options",
        "//testutil:util",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_absl//absl/types:span",
        "@com_google_cel_spec//proto/test/v1/proto3:test_all_types_cc_proto",
        "@com_google_googleapis//google/api/expr/v1alpha1:checked_cc_proto",
        "@com_google_googleapis//google/api/expr/v1alpha1:syntax_cc_proto",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_test(
    name = "flat_expr_builder_comprehensions_test",
    srcs = [
        "flat_expr_builder_comprehensions_test.cc",
    ],
    deps = [
        ":cel_expression_builder_flat_impl",
        ":comprehension_vulnerability_check",
        ":flat_expr_builder",
        "//eval/public:activation",
        "//eval/public:builtin_func_registrar",
        "//eval/public:cel_attribute",
        "//eval/public:cel_builtins",
        "//eval/public:cel_expression",
        "//eval/public:cel_options",
        "//eval/public:cel_value",
        "//eval/public:unknown_attribute_set",
        "//eval/public:unknown_set",
        "//eval/public/containers:container_backed_list_impl",
        "//eval/public/testing:matchers",
        "//eval/testutil:test_message_cc_proto",
        "//internal:status_macros",
        "//internal:testing",
        "//parser",
        "//runtime:runtime_options",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_googleapis//google/api/expr/v1alpha1:syntax_cc_proto",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_library(
    name = "cel_expression_builder_flat_impl",
    srcs = [
        "cel_expression_builder_flat_impl.cc",
    ],
    hdrs = [
        "cel_expression_builder_flat_impl.h",
    ],
    deps = [
        ":flat_expr_builder",
        "//base:ast",
        "//eval/eval:cel_expression_flat_impl",
        "//eval/eval:evaluator_core",
        "//eval/public:cel_expression",
        "//extensions/protobuf:ast_converters",
        "//internal:status_macros",
        "//runtime:runtime_issue",
        "//runtime:runtime_options",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_googleapis//google/api/expr/v1alpha1:checked_cc_proto",
        "@com_google_googleapis//google/api/expr/v1alpha1:syntax_cc_proto",
    ],
)

cc_test(
    name = "cel_expression_builder_flat_impl_test",
    srcs = [
        "cel_expression_builder_flat_impl_test.cc",
    ],
    deps = [
        ":cel_expression_builder_flat_impl",
        "//eval/public:activation",
        "//eval/public:builtin_func_registrar",
        "//eval/public/testing:matchers",
        "//internal:testing",
        "//parser",
        "//runtime:runtime_options",
        "@com_google_absl//absl/status",
        "@com_google_googleapis//google/api/expr/v1alpha1:checked_cc_proto",
        "@com_google_googleapis//google/api/expr/v1alpha1:syntax_cc_proto",
    ],
)

cc_library(
    name = "constant_folding",
    srcs = [
        "constant_folding.cc",
    ],
    hdrs = [
        "constant_folding.h",
    ],
    deps = [
        ":flat_expr_builder_extensions",
        ":resolver",
        "//base:builtins",
        "//base:data",
        "//base:handle",
        "//base:kind",
        "//base:memory",
        "//base/ast_internal:ast_impl",
        "//base/ast_internal:expr",
        "//eval/eval:const_value_step",
        "//eval/eval:evaluator_core",
        "//internal:status_macros",
        "//runtime:activation",
        "//runtime/internal:convert_constant",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/types:variant",
    ],
)

cc_test(
    name = "constant_folding_test",
    srcs = [
        "constant_folding_test.cc",
    ],
    deps = [
        ":constant_folding",
        ":flat_expr_builder_extensions",
        ":resolver",
        "//base:ast",
        "//base:data",
        "//base:memory",
        "//base/ast_internal:ast_impl",
        "//base/ast_internal:expr",
        "//eval/eval:const_value_step",
        "//eval/eval:create_list_step",
        "//eval/eval:create_struct_step",
        "//eval/eval:evaluator_core",
        "//extensions/protobuf:ast_converters",
        "//extensions/protobuf:memory_manager",
        "//internal:status_macros",
        "//internal:testing",
        "//parser",
        "//runtime:function_registry",
        "//runtime:runtime_issue",
        "//runtime:runtime_options",
        "//runtime:type_registry",
        "//runtime/internal:issue_collector",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_googleapis//google/api/expr/v1alpha1:syntax_cc_proto",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_library(
    name = "qualified_reference_resolver",
    srcs = [
        "qualified_reference_resolver.cc",
    ],
    hdrs = [
        "qualified_reference_resolver.h",
    ],
    deps = [
        ":flat_expr_builder_extensions",
        ":resolver",
        "//base:ast",
        "//base:builtins",
        "//base:kind",
        "//base/ast_internal:ast_impl",
        "//base/ast_internal:expr",
        "//eval/public:ast_rewrite_native",
        "//eval/public:source_position_native",
        "//runtime:runtime_issue",
        "//runtime/internal:issue_collector",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_library(
    name = "resolver",
    srcs = ["resolver.cc"],
    hdrs = ["resolver.h"],
    deps = [
        "//base:data",
        "//base:handle",
        "//base:kind",
        "//base:memory",
        "//internal:status_macros",
        "//runtime:function_overload_reference",
        "//runtime:function_registry",
        "//runtime:type_registry",
        "@com_google_absl//absl/base:nullability",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_test(
    name = "qualified_reference_resolver_test",
    srcs = [
        "qualified_reference_resolver_test.cc",
    ],
    deps = [
        ":qualified_reference_resolver",
        ":resolver",
        "//base:ast",
        "//base:builtins",
        "//base:data",
        "//base:memory",
        "//base/ast_internal:ast_impl",
        "//base/ast_internal:expr",
        "//eval/public:builtin_func_registrar",
        "//eval/public:cel_function",
        "//eval/public:cel_function_registry",
        "//extensions/protobuf:ast_converters",
        "//internal:casts",
        "//internal:testing",
        "//runtime:runtime_issue",
        "//runtime:type_registry",
        "//runtime/internal:issue_collector",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_googleapis//google/api/expr/v1alpha1:syntax_cc_proto",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_test(
    name = "flat_expr_builder_short_circuiting_conformance_test",
    srcs = [
        "flat_expr_builder_short_circuiting_conformance_test.cc",
    ],
    deps = [
        ":cel_expression_builder_flat_impl",
        ":flat_expr_builder",
        "//eval/public:activation",
        "//eval/public:cel_attribute",
        "//eval/public:cel_builtins",
        "//eval/public:cel_expression",
        "//eval/public:cel_options",
        "//eval/public:unknown_attribute_set",
        "//eval/public:unknown_set",
        "//internal:status_macros",
        "//internal:testing",
        "//runtime:runtime_options",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_test(
    name = "resolver_test",
    size = "small",
    srcs = ["resolver_test.cc"],
    deps = [
        ":resolver",
        "//base:data",
        "//base:memory",
        "//eval/public:cel_function",
        "//eval/public:cel_function_registry",
        "//eval/public:cel_type_registry",
        "//eval/public:cel_value",
        "//eval/public/structs:protobuf_descriptor_type_provider",
        "//eval/testutil:test_message_cc_proto",
        "//internal:testing",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_library(
    name = "regex_precompilation_optimization",
    srcs = ["regex_precompilation_optimization.cc"],
    hdrs = ["regex_precompilation_optimization.h"],
    deps = [
        ":flat_expr_builder_extensions",
        "//base:builtins",
        "//base:data",
        "//base/ast_internal:ast_impl",
        "//base/ast_internal:expr",
        "//common:native_type",
        "//eval/eval:compiler_constant_step",
        "//eval/eval:evaluator_core",
        "//eval/eval:regex_match_step",
        "//internal:casts",
        "//internal:status_macros",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_test(
    name = "regex_precompilation_optimization_test",
    srcs = ["regex_precompilation_optimization_test.cc"],
    deps = [
        ":cel_expression_builder_flat_impl",
        ":constant_folding",
        ":flat_expr_builder",
        ":flat_expr_builder_extensions",
        ":regex_precompilation_optimization",
        "//base:data",
        "//base:memory",
        "//base/ast_internal:ast_impl",
        "//base/ast_internal:expr",
        "//eval/eval:cel_expression_flat_impl",
        "//eval/eval:evaluator_core",
        "//eval/public:builtin_func_registrar",
        "//eval/public:cel_options",
        "//internal:testing",
        "//parser",
        "//runtime:runtime_issue",
        "//runtime/internal:issue_collector",
        "@com_google_googleapis//google/api/expr/v1alpha1:checked_cc_proto",
        "@com_google_googleapis//google/api/expr/v1alpha1:syntax_cc_proto",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_library(
    name = "comprehension_vulnerability_check",
    srcs = ["comprehension_vulnerability_check.cc"],
    hdrs = ["comprehension_vulnerability_check.h"],
    deps = [
        ":flat_expr_builder_extensions",
        "//base:builtins",
        "//base/ast_internal:ast_impl",
        "//base/ast_internal:expr",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings:string_view",
        "@com_google_absl//absl/types:variant",
    ],
)
